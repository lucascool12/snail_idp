vocabulary V {
    type Cell
    type Value
    type Size
    ValueOf: Cell -> Value
    Row: Cell*Cell -> Bool
    Column: Cell*Cell -> Bool
    NextCell: Cell -> Cell
    NextValue: Value -> Value
    EndValue: () -> Value
    StartValue: () -> Value
    LastCell: () -> Cell
    FirstCell: () -> Cell
}

theory T:V {
    !x0 in Cell: ((ValueOf(x0) ~= 0 & x0 ~= LastCell()) =>
        (?x1 in Cell: x1 > x0 & ValueOf(x1) = NextValue(ValueOf(x0)) &
        (!x2 in Cell: (x2 > x0 & x2 < x1) => (ValueOf(x2) = 0)))).
    (ValueOf(FirstCell()) ~= StartValue() =>
        ((ValueOf(FirstCell()) = 0) => 
            (?x0 in Cell: x0 > FirstCell() & ValueOf(x0) = StartValue() &
            !x1 in Cell: (x1 > FirstCell() & x1 < x0) => (ValueOf(x1) = 0)))). // First value is 1
    //(ValueOf(LastCell()) ~= EndValue() =>
        //((ValueOf(LastCell()) = 0) => 
            //(?x0 in Cell: x0 < LastCell() & ValueOf(x0) = EndValue() &
            //!x1 in Cell: (x1 > x0) => (ValueOf(x1) = 0)))). // Last value 3 (does not work)
    !x0,x1 in Cell: Row(x0, x1) & ValueOf(x0) ~= 0 => ValueOf(x0) ~= ValueOf(x1).
    !x0,x1 in Cell: Column(x0, x1) & ValueOf(x0) ~= 0 => ValueOf(x0) ~= ValueOf(x1).
}

structure S:V {
    Value := {0,1,2,3}.
    NextValue := {1 -> 2, 2 -> 3, 3 -> 1, 0 -> 0}.
    EndValue := 3.
    StartValue := 1.
    Size := 3.
    Cell := {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}.
    LastCell := 9.
    FirstCell := 1.
    ValueOf >> { 1 -> 1, 9 -> 3 }.
    Column := {(1,8),(8,7),(1,7),
        (2,9),(2,6),(9,6),
        (3,4),(4,5),(5,3)
        }.
    Row := {(1,2),(2,3),(3,1),
        (8,9),(9,4),(4,8),
        (7,6),(6,5),(5,7)
        }.
}

//structure S:V { // 3x3
    //Value := {0,1,2,3}.
    //NextValue := {1 -> 2, 2 -> 3, 3 -> 1, 0 -> 0}.
    //EndValue := 3.
    //StartValue := 1.
    //Size := 3.
    //Cell := {1,2,3,4,5,6,7,8,9}.
    //LastCell := 9.
    //FirstCell := 1.
    //ValueOf >> { 1 -> 1, 9 -> 3 }.
    //Column := {(1,8),(8,7),(1,7),
        //(2,9),(2,6),(9,6),
        //(3,4),(4,5),(5,3)
        //}.
    //Row := {(1,2),(2,3),(3,1),
        //(8,9),(9,4),(4,8),
        //(7,6),(6,5),(5,7)
        //}.
//}

procedure main() {
    pretty_print(model_expand(T, S))
}
