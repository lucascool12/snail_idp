vocabulary V {
    type Cell
    type Value
    type Size
    ValueOf: Cell -> Value
    Row: Cell -> Int
    Column: Cell -> Int
    NextValue: Value -> Value
    EndValue: () -> Value
    StartValue: () -> Value
    LastCell: () -> Cell
    FirstCell: () -> Cell
}

theory T:V {
    !x0 in Cell: ((ValueOf(x0) ~= 0 & x0 ~= LastCell()) =>                  // zorgen dat er een 1 2 3 sequentie is
        (?x1 in Cell: x1 > x0 &
            ((x1 ~= LastCell() <=> ValueOf(x1) = NextValue(ValueOf(x0))) |
                (x1 = LastCell() <=> (ValueOf(x1) = EndValue() | ValueOf(x1) = 0))
            ) &
            (!x2 in Cell: (x2 > x0 & x2 < x1) => (ValueOf(x2) = 0))
        )
    ).
    (ValueOf(FirstCell()) ~= StartValue() =>
        ((ValueOf(FirstCell()) = 0) <=> 
            (?x0 in Cell: x0 > FirstCell() & ValueOf(x0) = StartValue() &
            !x1 in Cell: (x1 > FirstCell() & x1 < x0) => (ValueOf(x1) = 0)))). // First Value must be StartValue()
    (ValueOf(LastCell()) ~= EndValue() =>
        ((ValueOf(LastCell()) = 0) <=> 
            (?x0 in Cell: x0 < LastCell() & ValueOf(x0) = EndValue() & // Last value must be EndValue()
            !x1 in Cell: (x1 > x0) => (ValueOf(x1) = 0)))).


    !z in Size: !y in Value: (y~=0) => #{x in Cell: Row(x)=z & ValueOf(x) = y} = 1.     // exact 1 van elke value op de elke rij

    !z in Size: !y in Value: (y~=0) => #{x in Cell: Column(x)=z & ValueOf(x) = y} = 1.  // exact 1 van elke value op de elke kolom

}

structure S:V {
    Size := { 1..7 }.
    Value := {0,1,2,3}.
    NextValue := {1 -> 2, 2 -> 3, 3 -> 1, 0 -> 0}.
    EndValue := 3.
    StartValue := 1.
    Cell := { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }.
    LastCell := 49.
    FirstCell := 1.
    ValueOf >> { 7 -> 3, 16 -> 1, 21 -> 1, 26 -> 3, 29 ->1, 39 -> 2, 44 -> 1, 46 -> 3 }.
    Column := { 1 -> 1, 19 -> 1, 20 -> 1, 21 -> 1, 22 -> 1, 23 -> 1, 24 -> 1, 
        2 -> 2, 18 -> 2, 25 -> 2, 37 -> 2, 38 -> 2, 39 -> 2, 40 -> 2, 
        3 -> 3, 17 -> 3, 26 -> 3, 36 -> 3, 41 -> 3, 47 -> 3, 48 -> 3, 
        4 -> 4, 16 -> 4, 27 -> 4, 35 -> 4, 42 -> 4, 46 -> 4, 49 -> 4, 
        5 -> 5, 15 -> 5, 28 -> 5, 34 -> 5, 43 -> 5, 44 -> 5, 45 -> 5, 
        6 -> 6, 14 -> 6, 29 -> 6, 30 -> 6, 31 -> 6, 32 -> 6, 33 -> 6, 
        7 -> 7, 8 -> 7, 9 -> 7, 10 -> 7, 11 -> 7, 12 -> 7, 13 -> 7
    }.
    Row := { 1 -> 1, 2 -> 1, 3 -> 1, 4 -> 1, 5 -> 1, 6 -> 1, 7 -> 1, 
        8 -> 2, 24 -> 2, 25 -> 2, 26 -> 2, 27 -> 2, 28 -> 2, 29 -> 2, 
        9 -> 3, 23 -> 3, 30 -> 3, 40 -> 3, 41 -> 3, 42 -> 3, 43 -> 3, 
        10 -> 4, 22 -> 4, 31 -> 4, 39 -> 4, 44 -> 4, 48 -> 4, 49 -> 4, 
        11 -> 5, 21 -> 5, 32 -> 5, 38 -> 5, 45 -> 5, 46 -> 5, 47 -> 5, 
        12 -> 6, 20 -> 6, 33 -> 6, 34 -> 6, 35 -> 6, 36 -> 6, 37 -> 6, 
        13 -> 7, 14 -> 7, 15 -> 7, 16 -> 7, 17 -> 7, 18 -> 7, 19 -> 7
         }.
}

//structure S:V { // 3x3
    //Value := {0,1,2,3}.
    //NextValue := {1 -> 2, 2 -> 3, 3 -> 1, 0 -> 0}.
    //EndValue := 3.
    //StartValue := 1.
    //Size := 3.
    //Cell := {1,2,3,4,5,6,7,8,9}.
    //LastCell := 9.
    //FirstCell := 1.
    //ValueOf >> { 1 -> 1, 9 -> 3 }.
    //Column := {(1,8),(8,7),(1,7),
        //(2,9),(2,6),(9,6),
        //(3,4),(4,5),(5,3)
        //}.
    //Row := {(1,2),(2,3),(3,1),
        //(8,9),(9,4),(4,8),
        //(7,6),(6,5),(5,7)
        //}.
//}

procedure main() {
    pretty_print(model_expand(T, S))
}
